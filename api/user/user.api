syntax = "v1"

info (
	title: "minitik HTTP user api"
	desc: "HTTP api for minitik user registration and login"
)

type UserRegisterRequest {
	Username string `form:"username"`
	Password string `form:"password"`
}

type UserRegisterResponse {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg"`
	UserId     int64  `json:"user_id"`
	Token      string `json:"token"`
}

type UserLoginRequest {
	Username string `form:"username"`
	Password string `form:"password"`
}

type UserLoginResponse {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg"`
	UserId     int64  `json:"user_id"`
	Token      string `json:"token"`
}

type UserInfoRequest {
	UserId int64  `form:"user_id"`
	Token  string `form:"token"`
}

type UserInfoResponse {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg"`
	// User
	Id              int64  `json:"id"`
	Name            string `json:"name"`
	FollowCount     int64  `json:"follow_count"`
	FollowerCount   int64  `json:"follower_count"`
	IsFollow        bool   `json:"is_follow"`
	Avatar          string `json:"avatar"`
	BackgroundImage string `json:"background_image"`
	Signature       string `json:"signature"`
	TotalFavorited  int64  `json:"total_favorited"`
	WorkCount       int64  `json:"work_count"`
	FavoriteCount   int64  `json:"favorite_count"`
}

@server (
	prefix: /douyin/user
)

service user-api {
	@handler UserRegister
	post /register(UserRegisterRequest) returns(UserRegisterResponse)

	@handler UserLogin
	post /login(UserLoginRequest) returns(UserLoginResponse)

	@handler UserInfo
	get /(UserInfoRequest) returns (UserInfoResponse)
}